Title: questions reading txt string int conversions c
Karma: 2
Date: 1400803004.0
summer class taking future assignment involves recursion learned hour ago thought tackle assignment time study test monday also ask professor said weekend unfortunate much stuff making sense actually understand questions asking questions constraints assignment say load lines txt file multidimensional integer array easy loading numbers txt contains loading characters x even load characters begin plop int array although tried yet integers original thought load string array convert int array smoother way making copy copy copy guess getline function load txt used previously assignment like without skeleton files given us additional constraints assignment allowed use sorting algorithms provided c although assignment looking straight code validation thoughts bits use really think puzzles like fun thanks help everyone came ta said walls anymore includeiostream include fstream include string using namespace std class recursion public recursionstring name private int grid int mainint argc const char argv argc string nameargv construct object open file recursion r new recursionname rprint recursionrecursionstring name constructor function reads file array grid new int int gridi new int char c ifstream infile infileopennamecstr cout ' name ' looks like endl endl int int j j j infile c cout c c actual char read character converted character converted c '' gridij c ' gridij cout endl cout endl infileclose cout converted name endl endl int iii print console see int j jj cout gridij cout endl leaves hard part finding recursive function group xs together interested plan create class make copy grid make print function requirement call copy function call recursive function called printgroupwith copy class x shares border diagonal adacent x shares one x y coordinate values shared one away make call fuction function look left right looking adding grouping list finds print function print groups recursive function finished anyone comments plans tell newbie trying best plan jumping assigments

==============================

